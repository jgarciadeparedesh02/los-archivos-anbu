// src/middleware/routeData.ts
import { defineRouteMiddleware } from '@astrojs/starlight/route-data';

export const onRequest = defineRouteMiddleware((context) => {
  const { url, locals } = context;
  const route = locals.starlightRoute;

  // Exit if we don't have a route object (e.g. on 404 pages).
  if (!route) return;

  // Match pages inside a unit folder for our subjects.
  const match = url.pathname.match(
    /^\/(desarrollo-interfaces|proyecto-integrador)\/(ut\d+)/i
  );
  if (!match) return;

  const subjectPath = match[1]; // 'desarrollo-interfaces' or 'proyecto-integrador'
  const unitSlug = match[2]; // 'ut1', 'ut2', etc.

  // The link to the subject's main page.
  const subjectHomeLink = `/${subjectPath}`;

  const filteredSidebar = route.sidebar.map((entry) => {
    // Keep the link to the subject's homepage.
    if ('link' in entry && entry.link === subjectHomeLink) {
      return entry;
    }

    // Check if the entry is a group for the current unit.
    if ('entries' in entry && Array.isArray(entry.entries) && entry.entries.length > 0) {
      // Strategy 1: Check if the group's label matches the unit slug. (e.g., label: 'ut1')
      if (entry.label && entry.label.toLowerCase() === unitSlug.toLowerCase()) {
        return entry;
      }
      // Strategy 2: Check if the first link in the group belongs to the current unit.
      // This is a fallback and relies on the structure of autogenerated sidebars.
      const firstEntry = entry.entries[0];
      if (firstEntry && 'href' in firstEntry && typeof firstEntry.href === 'string' && firstEntry.href.includes(`/${subjectPath}/${unitSlug}/`)) {
        return entry;
      }
    }

    // Discard all other entries.
    return null;
  }).filter(Boolean);

  // Only apply the filter if it results in a non-empty sidebar.
  // This prevents the sidebar from disappearing if the logic fails.
  if (filteredSidebar.length > 0) {
    route.sidebar = filteredSidebar;
  }
});